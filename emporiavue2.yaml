# This is a configuration for a split phase (two pole) power feed that is typical of residences in the USA.

# The substitution section makes it simpler to edit this file for your specific needs.
# The edits made here will be used to populate the naming of entities in the remaining parts of the file. 
# You should not need to make any adjustments beyond the Substitutions section.

substitutions:
  
 #---WIFI ADDRESS SETTING--- 
  wifi_ip: 10.1.1.200
  wifi_gateway: 10.1.1.254
  wifi_subnet: 255.255.255.0
  
# ---NETWORK NAME---
  # This is the network name of the Vue this will be loaded into. It is also used 
  # by the Hubitat driver I created to differentiate between panelboards and Vues 
  # within a panelboard. If you have more than one panelboard or Vue within a panelboard 
  # change the name according to the following convention: 
  #     "pb" for panelboard, Do not chnag this.
  #     "1-1" for first panelboard and first Vue in the panelboard.
  d_name: pb1-1
 
#---CT TO PHASE ASSOCIATION---
 # Set the phase that is associated with each CT.
 # This is zero based vs the 1 based markings on the Vue.
 # c0 is the CT connection marked 1.
 # 
 # Panelboards (aka load centers for those who might be a bit picky.)
 # alternate phases in the panel.  The position closest to the 
 # main breaker or main feeder lugs is phase A.  The next position is B.
 # this continues alternating through the rest of the breakers.
 # Both sidea begin with phase A.
 # 
 # *****SPECIAL NOTE ON TWIN BREAKERS*****
 # Standard circuit breaker positions are either 3/4" or 1" wide.  A twin breaker 
 # incorporates two breakers into one position.  A two pole breaker 
 # occupies two positions (i.e., it is 1-1/2" or 2" wide) and the breakers 
 # are connect to make them trip together. 
 
 # If you have twin breakers both circuits on the twin breaker are on the same phase.

  c0_phase: "phase_a"  # CT #1
  c1_phase: "phase_b"  # CT #2
  c2_phase: "phase_a"  # CT #3
  c3_phase: "phase_b"  # CT #4
  c4_phase: "phase_b"  # CT #5
  c5_phase: "phase_b"  # CT #6
  c6_phase: "phase_b"  # CT #7
  c7_phase: "phase_b"  # CT #8
  c8_phase: "phase_b"  # CT #9
  c9_phase: "phase_b"  # CT #10
  ca_phase: "phase_a"  # CT #11
  cb_phase: "phase_a"  # CT #12
  cc_phase: "phase_a"  # CT #13
  cd_phase: "phase_b"  # CT #14
  ce_phase: "phase_b"  # CT #15
  cf_phase: "phase_a"  # CT #16

#---VOLTAGE CALIBRATION---
# 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
# To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>

  a_calib: ".02317757"   # Phase A voltage calibration factor
  b_calib: ".021824"  # Phase A voltage calibration factor


#---END OF SUBSTITUTIONS---

esphome:
  name: $d_name

external_components:
  - source: github://emporia-vue-local/esphome@dev
    components:
      - emporia_vue

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

# Enable Home Assistant API
api:
#  encryption:
    # Encryption key is generated by the new device wizard.
#    key: "<generated_key_from_new_device_wizard>"

#  services:
#    - service: play_rtttl
#      variables:
#        song_str: string
#      then:
#        - rtttl.play:
#            rtttl: !lambda 'return song_str;'

ota:
  # Create a secure password for pushing OTA updates.
#  password: "<secure_password>"

# Enable logging
logger:
  logs:
    # by default, every reading will be printed to the UART, which is very slow
    # This will disable printing the readings but keep other helpful messages
    sensor: INFO

wifi:
  # Wifi credentials are stored securely by new device wizard.
  # Be aware that the system seems to be case sensitive when matching the SSID.
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Optional manual IP
  manual_ip:
    static_ip: $wifi_ip
    gateway: $wifi_gateway
    subnet: $wifi_subnet

preferences:
  # please also make sure `restore: false` is set on all `platform: total_daily_energy`
  # sensors below.
  flash_write_interval: "48h"

output:
  - platform: ledc
    pin: GPIO12
    id: buzzer
  - platform: gpio
    pin: GPIO27
    id: buzzer_gnd

rtttl:
  output: buzzer
  on_finished_playback:
    - logger.log: 'Song ended!'

button:
  - platform: template
    name: "Two Beeps"
    on_press:
      - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"

light:
  - platform: status_led
    name: "D3_LED"
    pin: 23
    restore_mode: ALWAYS_ON
    entity_category: config

i2c:
  sda: 21
  scl: 22
  scan: false
  frequency: 200kHz  # recommended range is 50-200kHz
  id: i2c_a

time:
  - platform: sntp
    id: my_time

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &throttle_avg
    # average all raw readings together over a 5 second span before publishing
    throttle_average: 10s
  - &throttle_time
    # only send the most recent measurement every 60 seconds
    throttle: 60s
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'

sensor:
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLACK  # Vue device wire color
        calibration: $a_calib  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: m A Voltage
          filters: [*throttle_avg, *pos]
        frequency:
          name: m Frequency
          filters: [*throttle_avg, *pos]
        
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: RED  # Vue device wire color
        calibration: $b_calib  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: m B Voltage
          filters: [*throttle_avg, *pos]
        phase_angle:
          name: m Phase Angle
          filters: [*throttle_avg, *pos]
    ct_clamps:
      # Do not specify a name for any of the power sensors here, only an id. This leaves the power sensors internal to ESPHome.
      # Copy sensors will filter and then send power measurements to HA
      # These non-throttled power sensors are used for accurately calculating energy
      - phase_id: phase_a
        input: "A"  # Verify the CT going to this device input also matches the phase/leg
        power:
          id: phase_a_p
          filters: [*pos]
        current:
          id: phase_a_c
          filters: [*throttle_avg, *pos]
      - phase_id: phase_b
        input: "B"  # Verify the CT going to this device input also matches the phase/leg
        power:
          id: phase_b_p
          filters: [*pos]
        current:
          id: phase_b_c
          filters: [*throttle_avg, *pos]
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      - { phase_id: $c0_phase, input:  "1", power: { id: cir01_p, filters: [ *pos ] }, current: { id: cir01_c, filters: [ *pos ] } }
      - { phase_id: $c1_phase, input:  "2", power: { id: cir02_p, filters: [ *pos ] }, current: { id: cir02_c, filters: [ *pos ] } }
      - { phase_id: $c2_phase, input:  "3", power: { id: cir03_p, filters: [ *pos ] }, current: { id: cir03_c, filters: [ *pos ] } }
      - { phase_id: $c3_phase, input:  "4", power: { id: cir04_p, filters: [ *pos ] }, current: { id: cir04_c, filters: [ *pos ] } }
      - { phase_id: $c4_phase, input:  "5", power: { id: cir05_p, filters: [ *pos ] }, current: { id: cir05_c, filters: [ *pos ] } }
      - { phase_id: $c5_phase, input:  "6", power: { id: cir06_p, filters: [ *pos ] }, current: { id: cir06_c, filters: [ *pos ] } }
      - { phase_id: $c6_phase, input:  "7", power: { id: cir07_p, filters: [ *pos ] }, current: { id: cir07_c, filters: [ *pos ] } }
      - { phase_id: $c7_phase, input:  "8", power: { id: cir08_p, filters: [ *pos ] }, current: { id: cir08_c, filters: [ *pos ] } }
      - { phase_id: $c8_phase, input:  "9", power: { id: cir09_p, filters: [ *pos ] }, current: { id: cir09_c, filters: [ *pos ] } }
      - { phase_id: $c9_phase, input: "10", power: { id: cir10_p, filters: [ *pos ] }, current: { id: cir10_c, filters: [ *pos ] } }
      - { phase_id: $ca_phase, input: "11", power: { id: cir11_p, filters: [ *pos ] }, current: { id: cir11_c, filters: [ *pos ] } }
      - { phase_id: $cb_phase, input: "12", power: { id: cir12_p, filters: [ *pos ] }, current: { id: cir12_c, filters: [ *pos ] } }
      - { phase_id: $cc_phase, input: "13", power: { id: cir13_p, filters: [ *pos ] }, current: { id: cir13_c, filters: [ *pos ] } }
      - { phase_id: $cd_phase, input: "14", power: { id: cir14_p, filters: [ *pos ] }, current: { id: cir14_c, filters: [ *pos ] } }
      - { phase_id: $ce_phase, input: "15", power: { id: cir15_p, filters: [ *pos ] }, current: { id: cir15_c, filters: [ *pos ] } }
      - { phase_id: $cf_phase, input: "16", power: { id: cir16_p, filters: [ *pos ] }, current: { id: cir16_c, filters: [ *pos ] } }

    on_update:
      then:
        - component.update: total_power
        - component.update: balance_power
  # The copy sensors filter and send the power state to Hubitat
  - { platform: copy, name: m A Power, source_id: phase_a_p, filters: *throttle_avg }
  - { platform: copy, name: m B Power, source_id: phase_b_p, filters: *throttle_avg }
  - { platform: copy, name: m Total Power, source_id: total_power, filters: *throttle_avg }
  - { platform: copy, name: m Balance Power, source_id: balance_power, filters: *throttle_avg }
  - { platform: copy, name: c0 Power, source_id: cir01_p, filters: *throttle_avg }
  - { platform: copy, name: c1 Power, source_id: cir02_p, filters: *throttle_avg }
  - { platform: copy, name: c2 Power, source_id: cir03_p, filters: *throttle_avg }
  - { platform: copy, name: c3 Power, source_id: cir04_p, filters: *throttle_avg }
  - { platform: copy, name: c4 Power, source_id: cir05_p, filters: *throttle_avg }
  - { platform: copy, name: c5 Power, source_id: cir06_p, filters: *throttle_avg }
  - { platform: copy, name: c6 Power, source_id: cir07_p, filters: *throttle_avg }
  - { platform: copy, name: c7 Power, source_id: cir08_p, filters: *throttle_avg }
  - { platform: copy, name: c8 Power, source_id: cir09_p, filters: *throttle_avg }
  - { platform: copy, name: c9 Power, source_id: cir10_p, filters: *throttle_avg }
  - { platform: copy, name: ca Power, source_id: cir11_p, filters: *throttle_avg }
  - { platform: copy, name: cb Power, source_id: cir12_p, filters: *throttle_avg }
  - { platform: copy, name: cc Power, source_id: cir13_p, filters: *throttle_avg }
  - { platform: copy, name: cd Power, source_id: cir14_p, filters: *throttle_avg }
  - { platform: copy, name: ce Power, source_id: cir15_p, filters: *throttle_avg }
  - { platform: copy, name: cf Power, source_id: cir16_p, filters: *throttle_avg }

  # The copy sensors filter and send the current state to Hubitat
  - { platform: copy, name: m A Current, source_id: phase_a_c, filters: *throttle_avg }
  - { platform: copy, name: m B Current, source_id: phase_b_c, filters: *throttle_avg }
  - { platform: copy, name: c0 Current, source_id: cir01_c, filters: *throttle_avg }
  - { platform: copy, name: c1 Current, source_id: cir02_c, filters: *throttle_avg }
  - { platform: copy, name: c2 Current, source_id: cir03_c, filters: *throttle_avg }
  - { platform: copy, name: c3 Current, source_id: cir04_c, filters: *throttle_avg }
  - { platform: copy, name: c4 Current, source_id: cir05_c, filters: *throttle_avg }
  - { platform: copy, name: c5 Current, source_id: cir06_c, filters: *throttle_avg }
  - { platform: copy, name: c6 Current, source_id: cir07_c, filters: *throttle_avg }
  - { platform: copy, name: c7 Current, source_id: cir08_c, filters: *throttle_avg }
  - { platform: copy, name: c8 Current, source_id: cir09_c, filters: *throttle_avg }
  - { platform: copy, name: c9 Current, source_id: cir10_c, filters: *throttle_avg }
  - { platform: copy, name: ca Current, source_id: cir11_c, filters: *throttle_avg }
  - { platform: copy, name: cb Current, source_id: cir12_c, filters: *throttle_avg }
  - { platform: copy, name: cc Current, source_id: cir13_c, filters: *throttle_avg }
  - { platform: copy, name: cd Current, source_id: cir14_c, filters: *throttle_avg }
  - { platform: copy, name: ce Current, source_id: cir15_c, filters: *throttle_avg }
  - { platform: copy, name: cf Current, source_id: cir16_c, filters: *throttle_avg }

  - platform: template
    lambda: return id(phase_a_p).state + id(phase_b_p).state;
    update_interval: never   # will be updated after all power sensors update via on_update trigger
    id: total_power
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
  - platform: total_daily_energy
    name: "m Total Daily Energy"
    power_id: total_power
    accuracy_decimals: 0
    restore: false
    filters: *throttle_time
  - platform: template
    lambda: !lambda |-
      return max(0.0f, id(total_power).state -
        id(cir01_p).state -
        id(cir02_p).state -
        id(cir03_p).state -
        id(cir04_p).state -
        id(cir05_p).state -
        id(cir06_p).state -
        id(cir07_p).state -
        id(cir08_p).state -
        id(cir09_p).state -
        id(cir10_p).state -
        id(cir11_p).state -
        id(cir12_p).state -
        id(cir13_p).state -
        id(cir14_p).state -
        id(cir15_p).state -
        id(cir16_p).state);
    update_interval: never   # will be updated after all power sensors update via on_update trigger
    id: balance_power
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
  - platform: total_daily_energy
    name: "m Balance Daily Energy"
    power_id: balance_power
    accuracy_decimals: 0
    restore: false
    filters: *throttle_time
  - { power_id: cir01_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c0 Daily Energy, filters: *throttle_time }
  - { power_id: cir02_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c1 Daily Energy, filters: *throttle_time }
  - { power_id: cir03_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c2 Daily Energy, filters: *throttle_time }
  - { power_id: cir04_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c3 Daily Energy, filters: *throttle_time }
  - { power_id: cir05_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c4 Daily Energy, filters: *throttle_time }
  - { power_id: cir06_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c5 Daily Energy, filters: *throttle_time }
  - { power_id: cir07_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c6 Daily Energy, filters: *throttle_time }
  - { power_id: cir08_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c7 Daily Energy, filters: *throttle_time }
  - { power_id: cir09_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c8 Daily Energy, filters: *throttle_time }
  - { power_id: cir10_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: c9 Daily Energy, filters: *throttle_time }
  - { power_id: cir11_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: ca Daily Energy, filters: *throttle_time }
  - { power_id: cir12_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: cb Daily Energy, filters: *throttle_time }
  - { power_id: cir13_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: cc Daily Energy, filters: *throttle_time }
  - { power_id: cir14_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: cd Daily Energy, filters: *throttle_time }
  - { power_id: cir15_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: ce Daily Energy, filters: *throttle_time }
  - { power_id: cir16_p, platform: total_daily_energy, accuracy_decimals: 0, restore: false, name: cf Daily Energy, filters: *throttle_time }
